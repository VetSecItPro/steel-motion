name: Deploy to Production VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
        NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
        SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 2222
        script: |
          set -e  # Exit on any error

          echo "Starting deployment to VPS..."

          # Navigate to project directory
          cd /root/steel-motion || { echo "Project directory not found"; exit 1; }

          # Create backup of current deployment
          BACKUP_DIR="/root/backups"
          mkdir -p "$BACKUP_DIR"
          cp -r /root/steel-motion "$BACKUP_DIR/steel-motion-backup-$(date +%Y%m%d-%H%M%S)" || echo "Backup failed but continuing..."

          # Pull latest changes
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main

          # Install dependencies
          echo "Installing dependencies..."
          npm ci --silent

          # Set up environment variables
          echo "Setting up environment variables..."
          echo "NEXT_PUBLIC_SANITY_PROJECT_ID=${{ secrets.SANITY_PROJECT_ID }}" > .env.local
          echo "NEXT_PUBLIC_SANITY_DATASET=${{ secrets.SANITY_DATASET }}" >> .env.local
          echo "SANITY_API_TOKEN=${{ secrets.SANITY_API_TOKEN }}" >> .env.local
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env.local

          # Build the application
          echo "Building application..."
          npm run build

          # Check if PM2 is installed
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            npm install -g pm2
          fi

          # Restart or start PM2 process
          echo "Managing PM2 process..."
          if pm2 list | grep -q "steel-motion-app"; then
            echo "Restarting existing PM2 process..."
            pm2 restart steel-motion-app
          else
            echo "Starting new PM2 process..."
            pm2 start npm --name "steel-motion-app" -- start
            pm2 save
          fi

          # Wait for application to start
          echo "Waiting for application to start..."
          sleep 10

          # Health check - PM2 process
          if pm2 list | grep -q "steel-motion-app.*online"; then
            echo "âœ“ PM2 process is running"
          else
            echo "âœ— PM2 process is not running"
            pm2 logs steel-motion-app --lines 10
            exit 1
          fi

          # Health check - HTTP response
          echo "Testing HTTP response..."
          for i in {1..5}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "âœ“ Site is responding on port 3000"
              break
            else
              echo "Attempt $i: Site not responding, waiting..."
              sleep 5
            fi

            if [ $i -eq 5 ]; then
              echo "âœ— Site is not responding after 5 attempts"
              pm2 logs steel-motion-app --lines 10
              exit 1
            fi
          done

          echo "ðŸš€ Deployment completed successfully!"
          echo "Website is live at: https://steelmotionllc.com"

    - name: Notify on failure
      if: failure()
      run: |
        echo "Deployment failed! Check the logs above for details."
        echo "The backup is available at /root/steel-motion-backup-TIMESTAMP on the VPS"